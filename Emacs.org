* N8's Emacs Config

This config will not be backwards compatible, and is concerned mainly with readability and not startup speed.
I use =use-package= in order to arrange individual packages, function userspace is =my/= unless code is borrowed.
** In Progress
*** TODO Make cursor dependent on insert mode
*** TODO Configure projectile and project directories
*** TODO Configure Treemacs and Centaur to work with projectile
*** TODO Configure Centaur to work with ivy
*** TODO Port config into WSL/clean up Windows dependencies
* Early Init

Early-Init.el executes when most things are not loaded, so disabling things there speeds startup. These lines are not migrated to the file itself.

#+begin_example emacs-lisp
  ;; Prevent package from initializing
  (setq package-enable-at-startup nil)

  ;; Disable visual components
  (setq tooltip-mode nil
        tool-bar-mode nil
        menu-bar-mode nil
        initial-scratch-message nil)

  ;; Set other GUI components
  (set-fringe-mode 10)

  ;; Set garbage collection high
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; Don't resize frame before font load
  (setq frame-inhibit-implied-resize t)

  ;; Don't compile packages at runtime
  (setq comp-deferred-compilation nil)
#+end_example

* Init

Contents of init.el that help to compile Emacs.org. Lines not migrated to file.

#+begin_example emacs-lisp
  (require 'org)
  (org-babel-load-file
    (expand-file-name "Emacs.org" user-emacs-directory))
#+end_example

* Package Management

Individual packages are set up in their respective sections.

** Set up repositories
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

** Set up use-package

Use-Package helps to condense package configurations.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Set up Quelpa

#+begin_src emacs-lisp
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents
       "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
  (use-package quelpa
    :custom (quelpa-update-melpa-p nil))
  (use-package quelpa-use-package)
#+end_src

* Default Settings

Anything pre-defined in Emacs to be changed

** Keep .emacs.d clean

#+begin_src emacs-lisp
  ;; Keep transient cruft out of ~/.emacs.d/
  (setq user-emacs-directory "~/.cache/emacs/"
        backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
        url-history-file (expand-file-name "url/history" user-emacs-directory)
        auto-save-list-file-prefix
        (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
        projectile-known-projects-file
        (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name
           (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

** Do not backup files

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Auto-Save in temp directory

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Y/N instead of Yes/No

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Spaces instead of Tab

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Disable startup messages

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-message t)
#+end_src

** Disable bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Disable scroll bar

Scroll bar cannot be disabled in =early-init.el=

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

** Start Fullscreen

#+begin_src emacs-lisp
  (toggle-frame-fullscreen)
#+end_src

* Enhancements

Anything additive to the user

** Esc as quit

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Delete whitespace upon save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init (which-key-mode)
    :custom (which-key-idle-delay 3))
#+end_src

** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** GCMH

GCMH makes it so that garbage collection is done when user is AFK, so normal usage is faster.

#+begin_src emacs-lisp
  (use-package gcmh
    :diminish
    :config (gcmh-mode 1)
    :custom (gcmh-high-cons-threshold 20000000))
#+end_src

* Visuals

Configure all of the visual elements

** Mixed Pitch Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 105)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 105)
  (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height 135 :weight 'regular)
#+end_src

** Window Alpha

Lowers the alpha of the background

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
#+end_src

** Line Numbers

Enable line numbers for certain modes

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Word Count

#+begin_src emacs-lisp
  (use-package wc-mode
    :hook (text-mode . wc-mode))
#+end_src

** All-The-Icons

Dependency for =doom-modeline=.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t))
#+end_src

** Centaur-Tabs

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-change-fonts "Fira Code Retina" 120)
    :custom
    (centaur-tabs-set-icons t)
    (centaur-tabs-height 36)
    (centaur-tabs-gray-out-icons 'buffer)
    (centaur-tabs-set-bar 'over)
    (centaur-tabs-show-navigation-buttons t)
    (centaur-tabs-down-tab-text " ▾ ")
    (centaur-tabs-backward-tab-text " < ")
    (centaur-tabs-forward-tab-text " > ")
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t s" . centaur-tabs-counsel-switch-group)
    ("C-c t p" . centaur-tabs-group-by-projectile-project)
    ("C-c t g" . centaur-tabs-group-buffer-groups))
#+end_src

** Doom-Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))
#+end_src

** Doom-Themes

#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src

** Minions

Minions organizes the minor modes listed on the modeline

#+begin_src emacs-lisp
  (use-package minions
    :init (minions-mode 1))
#+end_src

** Nyan-Mode

#+begin_src emacs-lisp
  (use-package nyan-mode
    :config (nyan-mode 1)
    :custom (nyan-animate-nyancat t))
#+end_src

** Rainbow-Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Theme-Looper

#+begin_src emacs-lisp
  (use-package theme-looper
    :config
    (theme-looper-set-favorite-themes
     '(doom-one
       doom-vibrant
       doom-city-lights
       doom-dark+
       doom-dracula
       doom-horizon
       doom-iosvkem
       doom-material
       doom-molokai
       doom-nord
       doom-opera
       doom-palenight
       doom-snazzy
       doom-spacegrey
       doom-tomorrow-night
       doom-wilmersdorf))
    (theme-looper-enable-random-theme))
#+end_src

* Org

** Cursor

Code borrowed from prot, enable line cursor in org mode

#+begin_src emacs-lisp
  (define-minor-mode my/cursor-type-mode
    "Toggle between static block and pulsing bar cursor."
    :init-value nil
    :global t
    (if my/cursor-type-mode
        (progn
          (setq-local cursor-type '(bar . 2)
                      cursor-in-non-selected-windows 'hollow))
      (dolist (local '(cursor-type
                       cursor-in-non-selected-windows))
        (kill-local-variable `,local))))
#+end_src

** Ox

#+begin_src emacs-lisp
  (require 'ox)
#+end_src

** Org

  Configure Org first so that if something further down the config breaks, it can be repaired with the org config working. Code stolen from =daviwil/emacs-from-scratch=

#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (my/cursor-type-mode 1)
    (setq org-ellipsis " ▾"
          org-src-tab-acts-natively nil
          org-src-fontify-natively nil)
    ;;(font-lock-add-keywords 'org-mode
    ;;'(("^ *\\([-]\\) "
    ;;(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "●"))))))

    ;; Set faces for heading levels
    (dolist
        (face '(
                (org-level-1 . 1.3)
                (org-level-2 . 1.15)
                (org-level-3 . 1.1)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font "Source Sans Pro"
                          :weight 'regular
                          :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook
    (org-mode . efs/org-mode-setup)
    (theme-looper-post-switch . efs/org-mode-setup))

  (defun org-src-format ()
    "Replace
    1. `C-c '` to call `org-edit-special`
    2. `C-x h` to mark all the source code
    3. `TAB` to format it
    into one step."
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))
  (bind-keys :map org-mode-map
             ("C-c C-<tab>" . org-src-format)
             ;; C-tab(original 'org-force-cycle-archived) to show the element
             ;; in another window(simpler version of org-panes.el)
             ;; then M-PageUp/Down to scroll another window
             ("C-<tab>" . org-tree-to-indirect-buffer)
             )
#+end_src

** Org-Tempo

Org tempo allows for insertion of built in snippets in org mode

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Org-Superstar

Use circles instead of stars for headings

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
    (org-hide-leading-stars t)
    (org-superstar-item-bullet-alist
     '((?+ . ?•)
       (?* . ?▪)
       (?- . ?–)))
    :custom-face
    (org-superstar-header-bullet ((t (:height 120)))))
 #+end_src

** Visual-Fill-Column

Center org mode text on the buffer

#+begin_src emacs-lisp
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Org-Pomodoro

Call =M-x org-pomodoro= on a TODO item to start Pomodoro

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org)
#+end_src

* Project Management

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Hydra

#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

** Projectile

Projectile is a way to organize projects inside emacs. Even though =C-c= is user keybindings, it is already part of most people's configs.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Docs")
      (setq projectile-project-search-path '("~/Docs")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

** Projectile-Counsel

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :after counsel
    :config (counsel-projectile-mode))
#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src

** Treemacs-Projectile

#+begin_example emacs-lisp
  (use-package treemacs-projectile)
#+end_example

** Treemacs-Magit

#+begin_example emacs-lisp
  (use-package treemacs-magit)
#+end_example

* Navigation

** Counsel

Swap normal Emacs buffer navigation with Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init (ivy-mode 1)
    :bind (("C-s" . swiper))
    :custom (ivy-count-format "(%d/%d) "))
#+end_src

** Ivy-Rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src

* Auto-completion

** Company

Company is an autocompletion tool for Emacs

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :init (global-company-mode)
    :custom
    (company-idle-delay 0.3)
    (company-minimum-prefix-length 2)
    (company-backends
     '((company-files
        company-keywords
        company-capf
        company-dabbrev-code
        company-etags
        company-dabbrev))))
#+end_src

** Company-Box

Company fronted, used for aligning boxes in mixed pitch mode

#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** Company-Powershell

A powershell backend for Company

#+begin_src emacs-lisp
  (use-package company-powershell
    :ensure quelpa
    :quelpa (company-powershell
             :fetcher github
             :repo "N8-Doge/company-powershell"
             :files ":defaults" "*.ps1"))
#+end_src

** Flycheck

Flycheck marks improper syntax

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode))
#+end_src

** Flyspell

Spellcheck built into Emacs

#+begin_src emacs-lisp
  (use-package flyspell
    :hook
    (text-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    :custom
    (flyspell-correct-highlight nil)
    (ispell-dictionary "en_US")
    (ispell-program-name "hunspell")
    (ispell-hunspell-dict-paths-alist
     '(("en_US" "C:\\Hunspell\\en_US.aff")
       ("default" "C:\\Hunspell\\default.aff")))
    :custom-face
    (tooltip ((t (:family "Fira Code Retina" :height 120)))))
#+end_src

** Flyspell-Correct

#+begin_src emacs-lisp
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

** Meghanada

Java method provider using Company and Flycheck

#+begin_src emacs-lisp
  (use-package meghanada)
#+end_src

** Smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :init (smartparens-global-mode))
#+end_src

** Yasnippet

Yasnippet allows for code block insertion based on templates

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish
    :init (yas-global-mode 1)
    :config (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet"))
#+end_src

Configure Yasnippet to work with Company

#+begin_src emacs-lisp
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+end_src

* Major Mode Hooks

** Java

#+begin_src emacs-lisp
  (add-hook 'java-mode-hook
            (lambda ()
              (meghanada-mode 1)
              (setq c-basic-offset 2)
              (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
#+end_src

** PS

#+begin_src emacs-lisp
  (add-hook 'ps-mode-hook
            (lambda ()
              (setq c-basic-offset 2)
              (add-to-list 'company-backends 'company-powershell)))
#+end_src

* PDF Viewing

** PDF-Tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config (pdf-loader-install))
#+end_src

** PDF-Continuous-Scroll-Mode

#+begin_src emacs-lisp
  (use-package pdf-continuous-scroll-mode
    :after (pdf-tools)
    :ensure quelpa
    :quelpa (pdf-continuous-scroll-mode
             :fetcher github
             :repo "dalanicolai/pdf-continuous-scroll-mode.el")
    :hook (pdf-view-mode . pdf-continuous-scroll-mode))
#+end_src

* Misc.

** Powershell

#+begin_src emacs-lisp
  (use-package powershell
    :custom (powershell-indent 2))
#+end_src

** Elcord

Elcord is an Emacs rich presence for Discord

#+begin_src emacs-lisp
  (use-package elcord
    :config
    (defun elcord--details-and-state ()
      "No line numbers"
      (let ((activity (list
                       (cons "details" (format "Editing %s" (buffer-name)))
                       (cons "state" (format "Major mode: %s" (elcord--mode-text))))))
        (when elcord-display-elapsed
          (push (list "timestamps" (cons "start" elcord--startup-time)) activity))
        activity)))
#+end_src

** Startup Message

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s, with the %s theme"
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       (nth 0 custom-enabled-themes))))
#+end_src
